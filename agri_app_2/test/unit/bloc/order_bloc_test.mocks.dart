// Mocks generated by Mockito 5.4.4 from annotations
// in agri_app_2/test/unit/bloc/order_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:agri_app_2/order/domain/order_model.dart' as _i2;
import 'package:agri_app_2/order/domain/update_order_model.dart' as _i3;
import 'package:agri_app_2/order/infrastructure/repository/order_repository.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeOrder_0 extends _i1.SmartFake implements _i2.Order {
  _FakeOrder_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUpdateOrderDto_1 extends _i1.SmartFake
    implements _i3.UpdateOrderDto {
  _FakeUpdateOrderDto_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [OrderRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockOrderRepository extends _i1.Mock implements _i4.OrderRepository {
  MockOrderRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Order> createOrder(_i2.Order? order) => (super.noSuchMethod(
        Invocation.method(
          #createOrder,
          [order],
        ),
        returnValue: _i5.Future<_i2.Order>.value(_FakeOrder_0(
          this,
          Invocation.method(
            #createOrder,
            [order],
          ),
        )),
      ) as _i5.Future<_i2.Order>);

  @override
  _i5.Future<void> deleteOrder(String? orderId) => (super.noSuchMethod(
        Invocation.method(
          #deleteOrder,
          [orderId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i3.UpdateOrderDto> updateOrder(
    String? orderId,
    _i3.UpdateOrderDto? order,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateOrder,
          [
            orderId,
            order,
          ],
        ),
        returnValue: _i5.Future<_i3.UpdateOrderDto>.value(_FakeUpdateOrderDto_1(
          this,
          Invocation.method(
            #updateOrder,
            [
              orderId,
              order,
            ],
          ),
        )),
      ) as _i5.Future<_i3.UpdateOrderDto>);

  @override
  _i5.Future<List<_i2.Order>> getOrderById(int? orderId) => (super.noSuchMethod(
        Invocation.method(
          #getOrderById,
          [orderId],
        ),
        returnValue: _i5.Future<List<_i2.Order>>.value(<_i2.Order>[]),
      ) as _i5.Future<List<_i2.Order>>);

  @override
  _i5.Future<List<_i2.Order>> getOrders() => (super.noSuchMethod(
        Invocation.method(
          #getOrders,
          [],
        ),
        returnValue: _i5.Future<List<_i2.Order>>.value(<_i2.Order>[]),
      ) as _i5.Future<List<_i2.Order>>);

  @override
  _i5.Future<List<_i2.Order>> getAllOrders() => (super.noSuchMethod(
        Invocation.method(
          #getAllOrders,
          [],
        ),
        returnValue: _i5.Future<List<_i2.Order>>.value(<_i2.Order>[]),
      ) as _i5.Future<List<_i2.Order>>);
}
